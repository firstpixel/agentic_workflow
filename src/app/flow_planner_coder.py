"""
Flow Planner Coder: Enhanced planning flow with CodeExecutorAgent

This module creates a planning flow that uses the CodeExecutorAgent instead of MockExecutorAgent
to actually create files and execute code blocks generated by the planner.

Features:
- Real code execution and file creation
- Safe sandboxed execution within project directories
- Support for Python, NodeJS, and web projects
- Integration with existing PlannerFlow architecture
"""

from __future__ import annotations
from typing import Any, Dict, List, Optional, Tuple
import os

from src.core.agent import BaseAgent, AgentConfig
from src.core.workflow_manager import WorkflowManager
from src.agents.planner_agent import PlannerAgent
from src.agents.code_executor_agent import CodeExecutorAgent
from src.app.flows_planner import UpdaterAgent


def build_planner_coder_flow(
    executor_agent_name: str = "CodeExecutor",
    executor_model_config: Optional[Dict[str, Any]] = None,
    retry_limit: int = 2,
    planner_model_config: Optional[Dict[str, Any]] = None,
    project_root: str = "./output"
) -> Tuple[Dict[str, List[str]], Dict[str, BaseAgent], Dict[str, Dict[str, Any]]]:
    """
    Returns (graph, agents, node_policies) for WorkflowManager with CodeExecutorAgent.
    Graph: Planner ‚Üí Updater, CodeExecutor ‚Üí Updater
    
    Args:
        executor_agent_name: Name for the executor agent
        executor_model_config: Configuration for the CodeExecutorAgent
        retry_limit: Number of retries for failed tasks
        planner_model_config: Configuration for the PlannerAgent
        project_root: Base directory for code execution (defaults to ./output)
    
    Returns:
        Tuple of (graph, agents, node_policies) for WorkflowManager
    """
    # Create PlannerAgent
    planner = PlannerAgent(AgentConfig(
        name="Planner",
        prompt_file="",  # stages load their own prompt files via LLMAgent
        model_config=(planner_model_config or {})
    ))

    # Create UpdaterAgent 
    updater = UpdaterAgent(AgentConfig(
        name="Updater",
        prompt_file="updater.md",
        model_config={"retry_limit": retry_limit}
    ))

    # Create CodeExecutorAgent with enhanced configuration
    base_executor_config = {
        "enable_execution": True,
        "allowed_extensions": [
            ".py", ".js", ".ts", ".jsx", ".tsx", ".html", ".css", ".json", 
            ".md", ".txt", ".sh", ".yaml", ".yml", ".gitignore", ".env"
        ]
    }
    if executor_model_config:
        executor_config = {**base_executor_config, **executor_model_config, **{"project_root": project_root}}
    else:
        executor_config = {**base_executor_config, "project_root": project_root}
    executor = CodeExecutorAgent(AgentConfig(
        name=executor_agent_name,
        prompt_file="code_executor.md",
        model_config=executor_config
    ))

    # Define the workflow graph
    graph = {
        "Planner": ["Updater"],
        "Updater": [executor_agent_name],
        executor_agent_name: ["Updater"]
    }

    # Agent registry
    agents = {
        "Planner": planner,
        "Updater": updater,
        executor_agent_name: executor
    }

    # Node policies (empty for now, using defaults)
    node_policies = {}

    return graph, agents, node_policies


def demo_planner_coder(project_request: str, project_name: str = "sample_project") -> None:
    """
    Self-contained demo that uses CodeExecutorAgent for actual code execution.
    
    Args:
        project_request: Description of what to build
        project_name: Name for the project directory
    """
    print(f"\n{'='*80}")
    print(f"üöÄ Testing Planner Coder Flow: {project_name}")
    print(f"{'='*80}")
    print(f"üìù Project Request: {project_request}")
    print()

    # Get model configuration
    model = os.getenv("OLLAMA_MODEL", "gemma3:latest")
    
    # Build the enhanced flow
    graph, agents, node_policies = build_planner_coder_flow(
        executor_agent_name="CodeExecutor",
        executor_model_config={
            "project_root": f"./output/{project_name}",
            "enable_execution": True
        },
        retry_limit=2,
        planner_model_config={
            "executor_agent": "CodeExecutor",
            "model": model,
            "options": {"temperature": 0.1}
        }
    )

    # Create workflow manager
    wm = WorkflowManager(graph=graph, agents=agents, node_policies=node_policies)

    # Run the workflow
    print("üîÑ Starting workflow execution...")
    try:
        results = wm.run_workflow("Planner", {"text": project_request})
        
        print(f"\n{'='*50}")
        print("üìä Workflow Results Summary:")
        print(f"{'='*50}")
        print(f"Total results: {len(results)}")
        
        for i, result in enumerate(results, 1):
            print(f"\nResult {i}:")
            print(f"  Success: {result.success}")
            print(f"  Display: {result.display_output or 'N/A'}")
            if result.output:
                print(f"  Output keys: {list(result.output.keys())}")
            if not result.success:
                print(f"  Error: {result.error}")
                
        # Show execution results if available
        for result in results:
            if (result.success and result.output and 
                result.output.get("execution_results")):
                print(f"\nüî® Execution Details:")
                for exec_result in result.output["execution_results"]:
                    action = exec_result.get("action", "unknown")
                    success = exec_result.get("success", False)
                    message = exec_result.get("message", "")
                    status = "‚úÖ" if success else "‚ùå"
                    print(f"  {status} {action}: {message}")
                    
    except Exception as e:
        print(f"‚ùå Workflow execution failed: {e}")


def run_sample_projects():
    """Run the sample projects from test_multiple_planning.py"""
    
    sample_projects = [
        ("Python Calculator", "Create a python calculator that can add, subtract, multiply and divide numbers."),
        ("React ArXiv App", "Create a react page that uses arxiv rss url to get papers about cs ai, with a search bar, and a filter per day: https://export.arxiv.org/api/query?search_query=all:csai&start=0&max_results=10"),
        ("Sudoku Game", "Create a sudoku game with html and vanilla js.")
    ]
    
    print(f"\n{'='*80}")
    print("üöÄ Running Sample Projects with CodeExecutorAgent")
    print(f"{'='*80}")
    
    for project_name, project_request in sample_projects:
        try:
            demo_planner_coder(project_request, project_name.replace(" ", "_").lower())
            print(f"\n{'='*40}")
            print(f"‚úÖ Completed: {project_name}")
            print(f"{'='*40}")
        except Exception as e:
            print(f"‚ùå Failed {project_name}: {e}")
            continue


# Main execution
if __name__ == "__main__":
    # You can run a single project or all sample projects
    
    # Single project example:
    # demo_planner_coder(
    #     "Create a simple Python web scraper that fetches and displays news headlines",
    #     "web_scraper"
    # )
    
    # Run all sample projects:
    run_sample_projects()